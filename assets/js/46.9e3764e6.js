(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{587:function(s,e,t){"use strict";t.r(e);var a=t(21),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"nodejs学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs学习"}},[s._v("#")]),s._v(" NodeJS学习")]),s._v(" "),e("h2",{attrs:{id:"一、node-js介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、node-js介绍"}},[s._v("#")]),s._v(" 一、Node.js介绍")]),s._v(" "),e("h3",{attrs:{id:"_1-nodejs介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-nodejs介绍"}},[s._v("#")]),s._v(" 1.nodejs介绍")]),s._v(" "),e("p",[s._v("​\tNode.js是基于Chrome V8 引擎的JavaScript运行环境")]),s._v(" "),e("p",[s._v("​\t注意：")]),s._v(" "),e("p",[s._v("​\t\ta.浏览器时JavaScript的前端运行环境")]),s._v(" "),e("p",[s._v("​\t\tb.Node.js是JavaScript的后端运行环境")]),s._v(" "),e("p",[s._v("​\t\tc.Node.js中无法调用DOM和BOM等浏览器内置API")]),s._v(" "),e("h3",{attrs:{id:"_2-node-js作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-node-js作用"}},[s._v("#")]),s._v(" 2.Node.js作用")]),s._v(" "),e("p",[s._v("​\tNode.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API。然而，基于 Node.js 提供的这些基础功能，很多强大 的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位！")]),s._v(" "),e("ul",[e("li",[s._v("基于 Express/Koa 框架(http://www.expressjs.com.cn/)，可以快速构建 Web 应用")]),s._v(" "),e("li",[s._v("基于 Electron 框架(https://electronjs.org/)，可以构建跨平台的桌面应用")]),s._v(" "),e("li",[s._v("基于 restify 框架(http://restify.com/)，可以快速构建 API 接口项目")]),s._v(" "),e("li",[s._v("读写和操作数据库、创建实用的命令行工具辅助前端开发")])]),s._v(" "),e("h2",{attrs:{id:"二、node-js安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、node-js安装"}},[s._v("#")]),s._v(" 二、node.js安装")]),s._v(" "),e("h3",{attrs:{id:"_1-下载地址-官网"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载地址-官网"}},[s._v("#")]),s._v(" 1.下载地址："),e("a",{attrs:{href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),e("OutboundLink")],1)]),s._v(" "),e("h3",{attrs:{id:"_2-版本区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-版本区别"}},[s._v("#")]),s._v(" 2.版本区别")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.LTS 为长期稳定版，对于追求稳定性的企业级项目来说，推荐安装 LTS 版本。\n2.Current 为新特性尝鲜版，对于热衷于尝试新特性的用户来说，推荐安装 Current 版本的 Node.js。但是，Current 版本 中可能存在隐藏的 Bug 或安全性漏洞，因此不推荐在企业级项目中使用 Current 版本的 Node.js。\n3.建议使用LTS版本\n")])])]),e("h3",{attrs:{id:"_3-安装完查看版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-安装完查看版本"}},[s._v("#")]),s._v(" 3.安装完查看版本")]),s._v(" "),e("p",[s._v("​\t打开终端（黑窗口，或者蓝窗口），在终端输入命令 "),e("code",[s._v("node –v")]),s._v(" 后，按下回车键，即可查看已安装的 Node.js 的版本号。")]),s._v(" "),e("h2",{attrs:{id:"三、node-js使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、node-js使用"}},[s._v("#")]),s._v(" 三、node.js使用")]),s._v(" "),e("h3",{attrs:{id:"_1-在node-js环境执行javascript代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-在node-js环境执行javascript代码"}},[s._v("#")]),s._v(" 1.在node.js环境执行JavaScript代码")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\n\t在终端输入 node + 要执行的文件路径\n使用\n\tnode 1.js\n")])])]),e("h3",{attrs:{id:"_2-fs文件系统模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-fs文件系统模块"}},[s._v("#")]),s._v(" 2.fs文件系统模块")]),s._v(" "),e("h5",{attrs:{id:"_2-1介绍-http-nodejs-cn-api-fs-html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1介绍-http-nodejs-cn-api-fs-html"}},[s._v("#")]),s._v(" 2.1介绍(http://nodejs.cn/api/fs.html)")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("fs 模块式Node.js官方提供的用来操作文件的模块，它提供了一系列的方法和属性，用来满足用户对文件的操作需要\n")])])]),e("h5",{attrs:{id:"_2-2使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2使用"}},[s._v("#")]),s._v(" 2.2使用")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const fs = require('fs')  //导入fs模块\n")])])]),e("h5",{attrs:{id:"_2-3属性及方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3属性及方法"}},[s._v("#")]),s._v(" 2.3属性及方法")]),s._v(" "),e("p",[s._v("​\t\t2.3.1 读取指定文件中的内容")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\nfs.readFile()\n参数1:文件路径(必填)\n参数2:指定编码格式(可选)\n参数3：文件读取后的回调方法(必填)\n\n使用\nconst fs = require('fs')  //导入fs模块\nfs.readFile('./files/11.txt', 'utf-8', (err, data) => {\n  // 如果读取成功，则err的值为null，data为读取到的数据\n  // 如果读取失败，则err的值为错误的对象，data的值为undefined\n  if (err) {\n    return console.log('文件读取失败：' + err.message)\n  }\n  console.log('文件读取成功，内容是:' + data)\n})\n")])])]),e("p",[s._v("​\t\t2.3.1向指定的文件中写入内容")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\nfs.writeFile()\n参数1:文件路径(必填),当路径下不存在文件会创建一个文件\n参数2:写入的文件内容(必须)\n参数3:文件的格式默认utf8(可选)\n\n使用\nfs.writeFile('./files/11.txt', '文件读取成功', (err) => {\n  // 如果文件写入成功，则err的值为null否则err等于错误对象\n   if (err) {\n        console.log('写入文件失败' + err.message);\n    } else {\n        console.log('文件写入成功');\n})\n")])])]),e("p",[s._v("​\t\t2.3.2 __dirname")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\n\t__dirname表示当前文件所在的目录\n使用\n\t__dirname + '/files/11.txt'\n使用原因\n\t出现路径拼接错误的问题是因为提供了./或../开头的相对路径解决这个问题可以直接提供一个完整的文件存放路径\n\n\n")])])]),e("h3",{attrs:{id:"_3-path路径模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-path路径模块"}},[s._v("#")]),s._v(" 3.path路径模块")]),s._v(" "),e("h5",{attrs:{id:"_3-1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-介绍"}},[s._v("#")]),s._v(" 3.1 介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("path模块是Node.js用来处理路径的模块\n")])])]),e("h5",{attrs:{id:"_3-2引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2引入"}},[s._v("#")]),s._v(" 3.2引入")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const path = require('path')  //导入fs模块\n")])])]),e("h5",{attrs:{id:"_3-2路径拼接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2路径拼接"}},[s._v("#")]),s._v(" 3.2路径拼接")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\npath.join()\n\n使用\nconst pathstr = path.join('/a', '/b/c', '../d', './e', 'f')\nconsole.log(pathstr)  //输出\\a\\b\\d\\e\\e\n\nconst pathstr1 = path.join('/a', '/b/c', '../../d', './e', 'f')\nconsole.log(pathstr1)  //输出\\a\\d\\e\\f\n\n注意: ../会地下前边的路径   ../../ 会抵消前边的两层\npath.join(__dirname,'/files/11.txt')\n注意:凡是涉及到路径拼接的操作,都要使用path.join()方法来实现\n")])])]),e("h5",{attrs:{id:"_3-3获取路径中文件名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3获取路径中文件名"}},[s._v("#")]),s._v(" 3.3获取路径中文件名")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\npath.basename()\n参数1:路径(必需)\n参数2:文件扩展名(可选)\n返回值:路径中的最后一部分\n\n使用\nconst file1 = '/a/b/c/index.html'\nconst fullName = path.basename(file1)\nconsole.log(fullName)  //输出 index.html\nconst fullName1 = path.basename(file1, '.html')\nconsole.log(fullName1) //输出 index\n")])])]),e("h5",{attrs:{id:"_3-4获取路径中的扩展名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4获取路径中的扩展名"}},[s._v("#")]),s._v(" 3.4获取路径中的扩展名")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义\npath.extname()\n参数1:路径(必填)\n返回值:扩展名字符串\n\n使用\nconst file2 = '/a/b/c/index.html'\nconst extName = path.extname(file2)\nconsole.log(extName) //输出 .html\n")])])]),e("h3",{attrs:{id:"_4-http模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http模块"}},[s._v("#")]),s._v(" 4.http模块")]),s._v(" "),e("h5",{attrs:{id:"_4-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1介绍"}},[s._v("#")]),s._v(" 4.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("http是一个系统模块，让我们能够通过简单的流程创建一个Web服务器的模块\n")])])]),e("h5",{attrs:{id:"_4-2ip地址介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2ip地址介绍"}},[s._v("#")]),s._v(" 4.2IP地址介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('IP地址是互联网上每台计算机的唯一地址\nIP地址格式通常用"点分十进制"表示成(a.b.c.d)的形式,其中a、b、c、d都是0~255之间的十进制整数。\n注意：互联网中每台web服务器，都有自己的IP地址\n')])])]),e("h5",{attrs:{id:"_4-3使用http创建服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3使用http创建服务器"}},[s._v("#")]),s._v(" 4.3使用http创建服务器")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 导入http模块\nconst http = require('http')\n\n// 创建web服务器实例\nconst server = http.createServer()\n\n// 为服务器实例绑定request 事件,监听客户端的请求\nserver.on('request', (req, res) => {\n   //req中存着访问与客户端相关的数据或属性\n  console.log(req.url) //客户端请求的地址\n  console.log(req.method) //客户端请求的类型\n  \n  // 设置请求头,防止中文出现乱码\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n  \n  // 调用res.end()方法,向客户端响应一些数据\n  res.end(req.url + req.method)\n})\n\n// 启动服务器\nserver.listen(8080, () => {\n  //其中端口号为80可以省略\n  console.log('server runing at http:127.0.0.1:8080')\n})\n")])])]),e("h3",{attrs:{id:"_5-模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-模块化"}},[s._v("#")]),s._v(" 5.模块化")]),s._v(" "),e("h5",{attrs:{id:"_5-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1介绍"}},[s._v("#")]),s._v(" 5.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("模块化是指解决一个复杂问题时,自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。\n编程中是将一个大文件拆分成独立并互相依赖的多个小模块\n")])])]),e("h5",{attrs:{id:"_5-2好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2好处"}},[s._v("#")]),s._v(" 5.2好处")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("提高代码的复用性\n提高代码的可维护性\n可以实现按需加载\n")])])]),e("h5",{attrs:{id:"_5-3node-js的模块分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3node-js的模块分类"}},[s._v("#")]),s._v(" 5.3node.js的模块分类")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("内置模块(官方提供的模块:fs、path、http等)\n自定义模块(自己创建的.js文件，都是自定义模块)\n第三方模块(由第三方开发出来的模块，使用前需要先下载)\n")])])]),e("h5",{attrs:{id:"_5-4加载模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4加载模块"}},[s._v("#")]),s._v(" 5.4加载模块")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("可以使用require()方法引入\n")])])]),e("h3",{attrs:{id:"_6-模块作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-模块作用"}},[s._v("#")]),s._v(" 6.模块作用")]),s._v(" "),e("h5",{attrs:{id:"_6-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1介绍"}},[s._v("#")]),s._v(" 6.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("在自定义模块中定义的变量、方法等，只能在当前模块内被访问,这种模块级别的访问限制,叫做模块作用域\n")])])]),e("h5",{attrs:{id:"_6-2好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2好处"}},[s._v("#")]),s._v(" 6.2好处")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("防止全局变量污染\n")])])]),e("h5",{attrs:{id:"_6-3-向外共享模块作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-向外共享模块作用域"}},[s._v("#")]),s._v(" 6.3 向外共享模块作用域")]),s._v(" "),e("p",[s._v("​\t\t6.3.1 module 对象")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n\t存放模块中相关信息\n\t\n使用\n\t在1.js中\n\t\tconst aa = '234'\n\t\tmodule.exports = {\n\t\t  c1: '123',\n\t\t  aa: aa,\n \t\t  name: () => {\n \t\t    console.log(123)\n\t\t  }\n\t\t}\t\n\n\t在2.js中\n\t\tconst aa = require('./1.js')\n\t\tconsole.log(aa)\n\t\n")])])]),e("p",[s._v("​\t\t6.3.2 exports 对象")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n\texports和module.exports指向的同一个对象\n\t\n使用\n\t在1.js中\n\t\tconst aa = '234'\n\t\texports = {\n\t\t  c1: '123',\n\t\t  aa: aa,\n \t\t  name: () => {\n \t\t    console.log(123)\n\t\t  }\n\t\t}\t\n\n\t在2.js中\n\t\tconst aa = require('./1.js')\n\t\tconsole.log(aa)\n")])])]),e("h3",{attrs:{id:"_7-模块化规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-模块化规范"}},[s._v("#")]),s._v(" 7.模块化规范")]),s._v(" "),e("h5",{attrs:{id:"_7-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1介绍"}},[s._v("#")]),s._v(" 7.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Node.js遵循了CommonJS模块化规范，CommonJS规定了模块的特性和各模块之间如何相互依赖。\n\nCommonJS规定:\n\ta.每个模块内部，module变量代表当前模块\n\tb.module变量是一个对象，它的exports属性是对外的接口\n\tc.加载某个模块，其实是加载模块的module.exports属性，require()方法用于加载模块\n")])])]),e("h3",{attrs:{id:"_8-npm和包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-npm和包"}},[s._v("#")]),s._v(" 8.npm和包")]),s._v(" "),e("h5",{attrs:{id:"_8-1包的介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1包的介绍"}},[s._v("#")]),s._v(" 8.1包的介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Node.js中的第三方模块又叫做包\n")])])]),e("h5",{attrs:{id:"_8-2包的来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2包的来源"}},[s._v("#")]),s._v(" 8.2包的来源")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("是由第三方个人或团队开发出来的,免费供所有人使用的\n")])])]),e("h5",{attrs:{id:"_8-3包的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3包的作用"}},[s._v("#")]),s._v(" 8.3包的作用")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("包是基于内置模块封装出来的，提供了更高级、更方便的API，极大地提高了开发效率\n")])])]),e("p",[s._v("​\t8.4包下载位置")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("https://www.npmjs.com/   查询包\nhttps://registry.npmjs.org/  下载包\n")])])]),e("p",[s._v("​\t8.5下载包")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.在终端查看是否存在npm，方法 npm -v\n2.下载包  npm i 包名\n3.查看使用方法\n\t在https://www.npmjs.com/中找到对应包\n\t在包中Documentation文档进行查看\n")])])]),e("p",[s._v("​\t8.6解决下载包慢点速度问题")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使用淘宝npm镜像服务器\n\n方法\n// 查看当前的下包镜像源\nnpm config get registry   \n//将下包的镜像源切换为淘宝镜像源\nnpm config set registry=https://registry.npm.taobao.org/ \n//检查镜像源是否下载成功\nnpm config get registry\n")])])]),e("p",[s._v("​\t8.7nrm")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n为了更加方便切换下包的镜像源，可以安装nrm这个小工具，利用nrm提供的终端命令，可以更快查看和切换下包的镜像源\n\n使用\n//安装nrm 包管理器\nnpm i nrm -g\n\n//查看所有可以的镜像源\nnrm ls\n\n//切换镜像源为taobao镜像\nnrm use taobao\n")])])]),e("p",[s._v("​\t8.8 包的分类")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.项目包(安装到项目的node_modules目录中的包)\n\ta.开发依赖包(被记录在devDependencies节点的包，只在开发期间使用)\n\tb.核心依赖包(被记录在dependencies节点的包，在开放期间和项目上线之后都会使用)\n2.全局包(在执行安装命令时，如果提供了-g参数的)\n")])])]),e("p",[s._v("​\t8.9开发自己的包")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('1.实现功能\n2.初始化包的基本结构\n\ta.新建文件夹，作为包的目录文件\n\tb.在文件夹中新建三个文件\n\t\tpackage.json(包管理配置文件)\n\t\tindex.js(包的入口文件)\n\t\tREADME.md(包的说明文档)\n3.初始化package.json\n{\n  "name": "xxx",                 //包的名称\n  "version": "1.0.0",\t\t\t //包的版本\t\n  "main": "index.js",\t\t\t //入口文件\n  "description": "",\t\t\t //包的描述\n  "keywords": [\'\',""],\t\t\t //关键字搜索\n  "license":"ISC"\t\t\t\t //开源许可协议\n}\n4.开发功能\n5.编辑说明文档\n\t安装方式、导入方式、开发的功能介绍、开源协议\n\t\n6.注册npm账号\n\ta.访问https://www.npmjs.com/网站，点击sign up按钮，进入注册用户页面\n\tb.填写账户相关信息\n\tc.点击Create an Account按钮，注册账号\n7.将包的服务器地址改成npm官方地址\n8.在终端中执行npm login命令，依次输入用户名、密码、邮箱，即可登录\n9.把包发布到npm上\n\t将终端切换到包的根目录之后，运行npm publish命令，即可将包发布到npm上(包不能重名)\n10.删除已发布的包\n\tnpm unpubilish 包名 --force\n注意：\n\ta.只能删除72小时以内发布的包\n\tb.删除的包24小时内不允许重复发布\n\tc.发布包的时候要谨慎，尽量不要发布没有意义的包\n')])])]),e("h3",{attrs:{id:"_9-模块的加载机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-模块的加载机制"}},[s._v("#")]),s._v(" 9.模块的加载机制")]),s._v(" "),e("h5",{attrs:{id:"_9-1优先从缓存中加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1优先从缓存中加载"}},[s._v("#")]),s._v(" 9.1优先从缓存中加载")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("模块在第一次加载后会被缓存,这个意味着多次调用require()不会导致模块的代码被执行多次，从而提高模块的加载效率\n")])])]),e("h5",{attrs:{id:"_9-2内置模块的加载机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2内置模块的加载机制"}},[s._v("#")]),s._v(" 9.2内置模块的加载机制")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("内置模块是由Node.js官方提供的模块，内置模块的加载优先级最高\n")])])]),e("h5",{attrs:{id:"_9-3自定义模块的加载机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3自定义模块的加载机制"}},[s._v("#")]),s._v(" 9.3自定义模块的加载机制")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使用require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定标识符，则node就会把它当作内置模块或第三方模块继续加载\n\n在加载时省略文件的扩展名，则Node.js会按顺序分别\n\ta.按照确切的文件名进行加载\n\tb.补全.js扩展名进行加载\n\tc.补全.json扩展名进行加载\n\td.补全.node扩展名进行加载\n\te.加载失败,终端报错\n")])])]),e("h5",{attrs:{id:"_9-4第三方模块的加载机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-4第三方模块的加载机制"}},[s._v("#")]),s._v(" 9.4第三方模块的加载机制")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("从当前模块的父目录开始，尝试从、node_modules文件中加载第三方模块，如果没有找到对应的第三方模块，则移动到再上一层的父目录中，进行加载，直到文件系统的根目录\n")])])]),e("h5",{attrs:{id:"_9-5目录作为模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-5目录作为模块"}},[s._v("#")]),s._v(" 9.5目录作为模块")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("当把目录作为模块标识符，进行加载时的方式\n a.在被加载的目录下查找一个叫做package.json的文件,并寻找main属性，作为加载的入口\n b.如果目录中没有package.json文件，或者main入口不存在或者无法解析，则Node.js将会试图加载目录下的index.js文件\n c.如果以上两个都失败，则Node.js会打印错误信息：Error:Cannot find module 'xxx'\n")])])]),e("h2",{attrs:{id:"四-express"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-express"}},[s._v("#")]),s._v(" 四.Express")]),s._v(" "),e("h3",{attrs:{id:"_1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[s._v("#")]),s._v(" 1.介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Express是基于Node.js平台，快速、开发、极简的web开发框架\nExpress可以开发\n\tWeb网站服务器(专门对外提供Web网页资源的服务器)\n\tAPI接口服务器(专门对外提供API接口的服务器)\n使用Express能更方便开发服务器\n")])])]),e("h3",{attrs:{id:"_2-本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-本质"}},[s._v("#")]),s._v(" 2.本质")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("本质上就是npm上的第三方包,提供了快速创建文本服务器的便捷方式\n")])])]),e("h3",{attrs:{id:"_3-地址-http-www-expressjs-com-cn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-地址-http-www-expressjs-com-cn"}},[s._v("#")]),s._v(" 3.地址(http://www.expressjs.com.cn/)")]),s._v(" "),e("h3",{attrs:{id:"_4安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4安装"}},[s._v("#")]),s._v(" 4安装")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm i express@4.17.1\n")])])]),e("h3",{attrs:{id:"_5创建基本的web服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5创建基本的web服务器"}},[s._v("#")]),s._v(" 5创建基本的Web服务器")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 导入express\nconst express = require('express')\n// 创建web服务器\nconst app = express()\n// 启动web服务器\napp.listen(8080, () => {\n  console.log('服务器启动')\n})\n// get Post\n// 参数1:客户端请求的URL地址\n// 参数2：请求对应的处理函数\n// req:请求对象(包含了请求相关的属性和方法)\n// res:响应对象(包含了响应相关的属性和方法)\napp.get('请求URL', (req, res) => {\n  //req.query 默认是一个空对象\n  //客户端使用?name=zz&age=2 这种查询字符串形式，发送到服务器的参数\n  //req.query.name   req.query.age 获取数据\n  console.log(req.query) \n  //获取客户端动态参数'地址/:id'\n  console.log(req.params)\n  // 获取客户端发送过来的请求体数据\n  console.log(req.body)\n  //对客户端响应数据\n   res.send({ name: '123', age: '2' })\n})\n\n\n例子\nconst express = require('express')\nconst app = express()\napp.get('/user', (req, res) => {\n  console.log(req.query)\n  res.send({ name: '123', age: 2 })\n})\napp.get('/user/:id', (req, res) => {\n  console.log(req.params)\n  console.log(req.query)\n  res.send({ name: '123', age: 2 })\n})\napp.listen(8080, () => {\n  console.log('服务器启动')\n})\n")])])]),e("h3",{attrs:{id:"_6托管静态资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6托管静态资源"}},[s._v("#")]),s._v(" 6托管静态资源")]),s._v(" "),e("h5",{attrs:{id:"_6-1-express-static"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-express-static"}},[s._v("#")]),s._v(" 6.1 express.static()")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\nexpress.static可以方便的创建一个静态资源服务器，将public目录下的图片、css文件、JavaScript文件对外访问\n\n注意\na.Express在指定的静态目录中查询文件，并对外提供资源访问路径。存放资源文件的目录名不会出现在URL中\nb.托管多个静态资源目录，可以多次调用express.static()函数，访问时就会根据目录添加的顺序进行查找说需文件,找到就不会继续往下找了\n\n使用\nconst express = require('express')\n\nconst app = express()\n// 创建对外提供的静态资源\n//clock是文件夹位置\napp.use(express.static('./clock'))\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n\n2.挂载路径前缀\n如果希望在托管的静态资源访问路径之前，挂载路径前缀\napp.use('clock',press.static('./clock'))\n//访问效果 http://localhost:8080/clock/index.html\n")])])]),e("h3",{attrs:{id:"_7-express路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-express路由"}},[s._v("#")]),s._v(" 7.Express路由")]),s._v(" "),e("h5",{attrs:{id:"_7-1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-介绍"}},[s._v("#")]),s._v(" 7.1.介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\na、路由指的是客户端的请求与服务器处理函数之间的映射关系\nb、express中路由分为请求的类型、请求的URL地址、处理函数\n\n例子使用\napp.get('/user', (req, res) => {})\n")])])]),e("p",[s._v("​\t7.2模块化路由")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n为了方便对路由进行模块化的管理,express不建议将路由直接挂载到app上,推荐将路由抽离为单独的模块\n\n使用\n\n模块化路由.js文件内容\n\n// 导入express\nconst express = require('express')\n// 创建路由对象\nconst router = express.Router()\n// 挂载请求到路由上\nrouter.get('/user', (req, res) => {\n  res.send('123')\n})\nrouter.post('/user', (req, res) => {\n  res.send('123')\n})\n//导出路由对象\nmodule.exports = router\n\n使用模块化路由.js文件内容\nconst express = require('express')\nconst app = express()\n// 导入路由模块\nconst router = require('./02路由模块化')\n// 注册路由模块\napp.use(router)   \napp.use('/api',router) // 添加前缀 \napp.listen(8080, () => {\n  console.log('连接成功')\n})\n\n\n\n")])])]),e("h3",{attrs:{id:"_8-express中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-express中间件"}},[s._v("#")]),s._v(" 8.Express中间件")]),s._v(" "),e("h5",{attrs:{id:"_8-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1介绍"}},[s._v("#")]),s._v(" 8.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n中间件事业务流程中的中间处理环节\n\n作用\n多个中间件之间，共享同一份req和res，基于这个的特性，我们可以在上游的中间件中，统一为req和res对象中添加自定义的属性和方法，供下游的中间件或路由进行使用\n\n调用流程\n当一个请求到达express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理\n\n定义\nconst mw = function (req, res, next) {\n  next() //存在这个参数就是中间件 \n}\n\nnext作用是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由\n\n\n")])])]),e("h5",{attrs:{id:"_8-2全局的中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2全局的中间件"}},[s._v("#")]),s._v(" 8.2全局的中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express')\n\nconst app = express()\n\n// 定义中间件\napp.use(function (req, res, next) {\n  console.log('中间件')\n  req.cs = '123' \n  next()\n})\n\napp.get('/', (req, res) => {\n  res.send('1' +  req.cs )\n})\napp.get('/user', (req, res) => {\n  res.send('2' +  req.cs)\n})\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("h5",{attrs:{id:"_8-3定义多个全局中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3定义多个全局中间件"}},[s._v("#")]),s._v(" 8.3定义多个全局中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("说明\n\t使用app.use()连续定义多个全局中间件，会按照中间件定义的先后顺序依次进行调用\n\n使用\nconst express = require('express')\n\nconst app = express()\n\n// 定义中间件\napp.use(function (req, res, next) {\n  console.log('中间件')\n  req.cs = '123'\n  next()\n})\napp.get('/', (req, res) => {\n  res.send('1' + req.cs)   //输出 1123\n})\napp.use(function (req, res, next) {\n  console.log('中间件')\n  req.cs += '123'\n  next()\n})\n\napp.get('/user', (req, res) => {\n  res.send('2' + req.cs)  //输出2123123\n})\napp.listen(8080, () => {\n  console.log('连接成功')\n})\t\n")])])]),e("h5",{attrs:{id:"_8-4定义局部生效的中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-4定义局部生效的中间件"}},[s._v("#")]),s._v(" 8.4定义局部生效的中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n不使用app.use()定义的中间件，就叫做局部生效的中间件\n\n使用\nconst express = require('express')\nconst app = express()\n\nconst mw = (req, res, next) => {\n  req.cs = 'ccc'\n  next()\n}\n\napp.get('/', mw, (req, res) => {\n  res.send('123' + req.cs)  //输出 123ccc\n})\napp.get('/user', (req, res) => {\n  res.send('123' + req.cs) //输出 123undefined \n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("h5",{attrs:{id:"_8-5定义多个局部生效的中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-5定义多个局部生效的中间件"}},[s._v("#")]),s._v(" 8.5定义多个局部生效的中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express')\nconst app = express()\n\nconst mw = (req, res, next) => {\n  req.cs = 'ccc'\n  next()\n}\nconst mw1 = (req, res, next) => {\n  req.cs += 'ddd'\n  next()\n}\n// 方法1\napp.get('/', mw, mw1, (req, res) => {\n  res.send('123' + req.cs) //输出 123cccddd\n})\n\n// 方法2\napp.get('/user', [mw, mw1], (req, res) => {\n  res.send('123' + req.cs) //输出 123cccddd\n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n\n")])])]),e("h5",{attrs:{id:"_8-6中间件注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6中间件注意事项"}},[s._v("#")]),s._v(" 8.6中间件注意事项")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("a.一定要在路由之前注册中间件\nb.客户端发送过来的请求，可以连续调用多个中间件进行激活\nc.执行完中间件的业务代码之后，不要忘记调用next()函数\nd.为了防止代码逻辑混乱，调用next()函数后不要写额外的代码\ne.连续调用多个中间件时,多个中间件之间共享req和res对象\nf.错误级别的中间件必须注册在所有路由之后\n")])])]),e("h5",{attrs:{id:"_8-7中间件的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-7中间件的分类"}},[s._v("#")]),s._v(" 8.7中间件的分类")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.应用级别的中间件(通过app.use()、app.get()、app.post()，绑定到app实例上的中间件)\n2.路由级别的中间件(绑定到express.Router()实例上的中间件)\n3.错误级别的中间件(专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃问题)\n4.Express内置的中间件\n5.第三方的中间件(非Express官方内置的，是由第三方开发出来的中间件)\n")])])]),e("h5",{attrs:{id:"_8-8错误中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-8错误中间件"}},[s._v("#")]),s._v(" 8.8错误中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使用\nconst express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  throw new Error('错误！123')\n  res.send('123') //输出 123cccddd\n})\n//\napp.use((err, req, res, next) => {\n  console.log(err)\n  res.send(err.message) //输出 123cccddd\n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("h5",{attrs:{id:"_8-9express内置中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-9express内置中间件"}},[s._v("#")]),s._v(" 8.9Express内置中间件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.express.static快速托管静态资源的内置中间件(无兼容性)\n2.express.json解析JSON格式的请求体数据(有兼容性：仅在4.16.0+版本中可用)\n3.express.urlencoded解析URL-encoded格式的请求体数据(有兼容性：仅在4.16.0+版本中可用)\n")])])]),e("p",[s._v("​\t8.9.1使用express.json()")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express')\nconst app = express()\n\n// 配置解析 application/json 格式数据的内置中间件,解析JSON格式的数据\napp.use(express.json())\napp.post('/user', (req, res) => {\n  // 在服务器，可以使用req.body这个属性来接收客户端发送过来的请求体数据\n  // 默认情况下，如果不配置解析表单数据的中间件,则req.body默认等于 underfined\n  console.log(req.body)\n  res.send('123')\n})\n\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("p",[s._v("​\tPostman中配置JSON数据类型的参数")]),s._v(" "),e("p",[e("img",{attrs:{src:"D:%5C%E5%89%8D%E7%AB%AF%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5Cnodejs%5CJSON%E6%95%B0%E6%8D%AE.jpg",alt:"JSON数据"}}),s._v("\t8.9.2使用express.urlencoded()")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express')\nconst app = express()\n\n// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件\napp.use(express.urlencoded({ extended: false }))\n\napp.post('/user', (req, res) => {\n  // 在服务器，可以使用req.body这个属性来接收客户端发送过来的请求体数据\n  // 默认情况下，如果不配置解析表单数据的中间件,则req.body默认等于 underfined\n  console.log(req.body)\n  res.send('123')\n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("p",[s._v("Postman中配置x-www-form-urlencoded 数据类型的参数")]),s._v(" "),e("p",[e("img",{attrs:{src:"D:%5C%E5%89%8D%E7%AB%AF%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5Cnodejs%5C%E9%85%8D%E7%BD%AEx-www-form-urlencoded.jpg",alt:"配置x-www-form-urlencoded"}})]),s._v(" "),e("h5",{attrs:{id:"_8-10第三方的中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-10第三方的中间件"}},[s._v("#")]),s._v(" 8.10第三方的中间件")]),s._v(" "),e("p",[s._v("​\t8.10.1body-parser")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("安装\nnpm i body-parser\n\n使用\nconst express = require('express')\nconst app = express()\n\n// 导入解析数据的中间件 body-parser\nconst parser = require('body-parser')\n// 注册\napp.use(parser.urlencoded({ extended: false }))\n\napp.post('/user', (req, res) => {\n  // 默认情况下，如果不配置解析表单数据的中间件,则req.body默认等于 underfined\n  console.log(req.body)\n  res.send('123')\n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n")])])]),e("p",[s._v("8.11 自定义中间件")]),s._v(" "),e("p",[s._v("​\t8.11.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("自己封装一个类似express.urlencoded这样的中间件，来解析POST提交到服务器的表单数据\n")])])]),e("p",[s._v("​\t8.11.2使用")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express')\nconst app = express()\n// 导入内置querystring模块\nconst qs = require('querystring')\n// 注册中间件\napp.use((req, res, next) => {\n  // 1.定义str字符串，用来存储客户端发送过来的请求体数据\n  let str = ''\n  // 监听req中的data数据事件\n  req.on('data', (chuck) => {\n    str += chuck\n  })\n  // 监听req对象中的end事件\n  req.on('end', () => {\n    // 在str中存放的是完整的请求体数据\n    const body = qs.parse(str)\n    req.body = body\n    next()\n  })\n})\n\napp.post('/user', (req, res) => {\n  // 默认情况下，如果不配置解析表单数据的中间件,则req.body默认等于 underfined\n  console.log(req.body)\n  res.send('123')\n})\n\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n\n")])])]),e("h3",{attrs:{id:"_9-express写接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-express写接口"}},[s._v("#")]),s._v(" 9.Express写接口")]),s._v(" "),e("h5",{attrs:{id:"_9-1cors-跨域资源共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1cors-跨域资源共享"}},[s._v("#")]),s._v(" 9.1cors 跨域资源共享")]),s._v(" "),e("p",[s._v("​\t9.1.1接口解决跨域问题")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" 安装\n npm i cors  \n 导入\n const cors = require('cors')\n 在路由之前调用\n app.use(cors())\n")])])]),e("p",[s._v("​\t9.1.2cors响应头")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.Access-Control-Allow-Orign:<origin> | *\n\n属性\norigin参数值指定了允许访问该资源的外域URl\n* 表示所有\n使用\nres.setHeader('Access-Control-Allow-Orign','*')  //所有外域\nres.setHeader('Access-Control-Allow-Orign','http://idsdsa.cn') //指定某个外域\n\n2.Access-Control-Allow-Headers \n介绍\n默认情况下:cors仅支持客户端向服务器发送9个请求头:\nAccept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width、Content-Type(值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一)\n如果客户端向服务器发送了额外的请求头信息，则需要再服务器端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则报错\n\n使用\n// 允许客户端额外向服务器发送Content-Type请求头和X-Custom-Header请求头\n// 注意：多个请求头之间使用英文的逗号进行分隔\nres.setHeader('Access-Control-Allow-Headers', 'Content-Type,X-Custom-Header')\n\n3.Access-Control-Allow-Methods\n介绍\n\t默认情况下，cors仅支持客户端发起GET、POST、HEAD请求\n\t\n使用\n  // 只允许 POST、GET、DELECT、HEAD 请求方式\n  res.setHeader('Access-Control-Allow-Methods', 'POST,GET,DELECT,HEAD')\n  // 允许所有的HTTP请求方法\n  res.setHeader('Access-Control-Allow-Methods','*') \n")])])]),e("p",[s._v("​\t9.1.3cors请求分类")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('根据请求方式和请求头的不同，可以将cors的请求分为两大类：\n\t简单请求\n\t 条件(都满足)\n\t  a.请求方式：GET、POST、HEAD三者之一\n\t  b.HTTP头部信息不超过以下几种字段:无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width、Content-Type(值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一)\n\t预检请求\n\t  条件(满足一个)\n\t   a.请求方式：GET、POST、HEAD之外的请求Method类型\n\t   b.请求头中包含自定义头部字段\n\t   c.向服务器发送了application/json格式的数据\n\t\n\t在浏览器与服务器正式通信之前，浏览器会先发送POTION请求继续预检，以获知服务器是否允许改实际请求，所以这一次的OPTION请求称为"预检请求"。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据\n\t\n两者区别\n  1.请求次数\n   简单请求:客户端和服务器之间只会请求一次\n   预检请求:客户端和服务器之间会发生两次请求,OPTION预检请求成功之后才会发起真正的请求\n  2.\n')])])]),e("h5",{attrs:{id:"_9-2接口实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2接口实现"}},[s._v("#")]),s._v(" 9.2接口实现")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("路由模块配置\nconst express = require('express')\nconst apiRouter = express.Router()\n\n//挂载路由\n// get 接口\napiRouter.get('/url', (req, res) => {\n  // 获取客户端传递的数据\n  console.log(123)\n  const query = req.query\n  // 调用 res.send()方法,把数据响应给客户端\n  res.send({\n    status: 0,\n    msg: 'GET 请求成功！',\n    data: query\n  })\n})\n\n// post 接口\napiRouter.post('/post', (req, res) => {\n  // 获取客户端传递的数据\n  const body = req.body\n  // 调用 res.send()方法,把数据响应给客户端\n  res.send({\n    status: 0,\n    msg: 'POST 请求成功！',\n    data: body\n  })\n})\nmodule.exports = apiRouter\n\n在使用文件\n// 导入 express\nconst express = require('express')\n// 导入路由模块\nconst router = require('路由模块')\n// 导入cors\nconst cors = require('cors')\n// 创建服务器实例\nconst app = express()\n// 注册cors中间件\napp.use(cors())\n// 配置解析 application/json 格式数据的内置中间件,解析JSON格式的数据\napp.use(express.json())\n// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件\napp.use(express.urlencoded({ extended: false }))\n// 注册路由\napp.use('/api', router)\n//启动服务器\napp.listen(8080, () => {\n  console.log('连接成功')\n})\n\n")])])]),e("h5",{attrs:{id:"_9-3json接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3json接口"}},[s._v("#")]),s._v(" 9.3JSON接口")]),s._v(" "),e("p",[s._v("​\t9.3.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("浏览器端通过<script>标签的src属性请求服务器上的数据。同时服务器返回一个函数的调用，这种请求数据的方式叫做JSONP\n")])])]),e("p",[s._v("​\t9.3.2.特点")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.JSONP不属于真正的Ajax请求，因为它没有使用XMLHttpRequest这个对象\n2.JSONP仅支持GET请求，不支持POST、PUT、DELETE等请求\n")])])]),e("p",[s._v("​\t9.3.3创建JSONP接口注意事项")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("项目中已经配置了cors跨域资源共享，为了防止冲突，必须在配置CORS中间件之前声明JSONP的接口，否则JSONP接口会被处理成开启了CORS的接口\n")])])]),e("p",[s._v("​\t9.3.4实现JSONP接口")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 必须在配置cors中间件之前配置JSONP的接口\napp.json('/api/jsonp', (req, res) => {\n  // 定义JSONP 接口具体的实现过程\n  // 1.得到函数的名称\n  const funName = req.query.callback\n  // 2.定义要发送到客户端的数据对象\n  const data = { name: 'zz', id: '123' }\n  // 3.拼接出一个函数的调用\n  const srciptStr = `${funName}(${JSON.stringify(data)})`\n  // 4.把拼接的字符串,响应到客户端\n  res.send(srciptStr)\n})\n")])])]),e("p",[s._v("​\t9.3.5在页面中使用jQuery发送JSONP请求")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<!DOCTYPE html>\n<html lang="zh-CN">\n\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n  <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"><\/script>\n</head>\n\n<body>\n  <button id="btnJSONP">JSONP</button>\n  <script>\n    $(function () {\n      $(\'#btnJSONP\').on(\'click\', function () {\n        $.ajax({\n          type: \'GET\',\n          url: \'http://127.0.0.1:8080/api/jsonp\',\n          dataType: \'jsonp\',\n          success: function (res) {\n            console.log(res);\n          }\n        })\n      })\n    })\n  <\/script>\n</body>\n\n</html>\n')])])]),e("h2",{attrs:{id:"五、数据库与身份认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、数据库与身份认证"}},[s._v("#")]),s._v(" 五、数据库与身份认证")]),s._v(" "),e("h3",{attrs:{id:"_1-数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库"}},[s._v("#")]),s._v(" 1.数据库")]),s._v(" "),e("h5",{attrs:{id:"_1-1介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1介绍"}},[s._v("#")]),s._v(" 1.1介绍")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("数据库是用来组织、储存和管理数据的仓库\n")])])]),e("h5",{attrs:{id:"_1-2常见的数据的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2常见的数据的分类"}},[s._v("#")]),s._v(" 1.2常见的数据的分类")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MySQL(是目前使用最广泛、流行度最高的开源免费的数据库)\nOracle(收费)\nSQL Service(收费)\nMongodb\n\n其中，MySQL、Oracle、SQL Service属于传统型的数据库(又叫做:关系型数据库或SQL数据库)，这三者的设计理念相同，用法比较类型\nMongodb属于新型数据库(又叫做:非关系型数据库或NoSQL数据库)，它在一定程度上弥补了传统型数据库的缺陷\n")])])]),e("h5",{attrs:{id:"_1-3传统数据库的数据组织结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3传统数据库的数据组织结构"}},[s._v("#")]),s._v(" 1.3传统数据库的数据组织结构")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("数据组织结构分为数据库、数据表、数据行、字段\n开发中数据结构之间的关系\n\t1.每个项目都对象独立的数据库\n\t2.不同数据存储到数据库中的不同表中\n\t3.每个表存在的信息是由字段来决定的\n\t4.表中的行代表每一条具体的数据\n")])])]),e("h3",{attrs:{id:"_2-数据库的安装和配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库的安装和配置"}},[s._v("#")]),s._v(" 2.数据库的安装和配置")]),s._v(" "),e("p",[s._v("​\t2.1介绍安装软件")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MySQL Serve:专门用来提供数据存储和服务的转件\nMySQL Workbeanch:可视化的MySQL管理工具，可以方便的操作存储在MySQL Server中的数据\n")])])]),e("p",[s._v("​\t2.2 安装")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("要运行mysql-installer-community-8.0.19.0.msi安装包,就能安装MySQL Serve和MySQL Workbeanch\n")])])]),e("h5",{attrs:{id:"_2-3使用数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3使用数据库"}},[s._v("#")]),s._v(" 2.3使用数据库")]),s._v(" "),e("p",[s._v("​\t\t2.3.1新建Mysql连接")]),s._v(" "),e("p",[s._v("​\t\t2.3.2创建数据库")]),s._v(" "),e("p",[s._v("​\t\t2.3.3创建数据表")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("DataType数据类型:\n\tinit    整数\n\tvarchar 字符串\n\ttinyint 布尔型\n\t\n字段的特殊标识\n\tpk 主键，唯一标识\n\tnn 值不能为空\n\tuq 值唯一\n\tai 自动增长\n")])])]),e("p",[s._v("​\t2.3.4使用sql操作表")]),s._v(" "),e("p",[s._v("​\t\t2.3.4.1介绍Sql")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SQL是结构化查询语言，专门用来访问和处理数据库的编程语言，以编辑的方式操作数据库里的数据\n")])])]),e("p",[s._v("​\t\t2.3.4.2语法")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.查询\nSELECT * FROM `user` //查询user表中所有列\nSELECT username FROM `user`  //查询user表中列为username数据\n\n注意:\n\t1.sql语句不区分大小写\n")])])]),e("h3",{attrs:{id:"path和fs共同使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#path和fs共同使用"}},[s._v("#")]),s._v(" path和fs共同使用")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const pathstr2 = path.join(__dirname, './files/11.txt')\nfs.readFile(pathstr2, 'utf-8', (err, data) => {\n  console.log(err, data)\n})\n")])])]),e("h3",{attrs:{id:"终端命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终端命令"}},[s._v("#")]),s._v(" 终端命令")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使用 ↑ 键，可以快速定位到上一次执行的命令\n使用 tab 键，能够快速补全路径\n使用 esc 键，能够快速清空当前已输入的命令\n输入 cls 命令，可以清空终端\n")])])]),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm init -y //初始化包管理配置文件\n")])])]),e("h3",{attrs:{id:"包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[s._v("#")]),s._v(" 包")]),s._v(" "),e("h5",{attrs:{id:"_1-moment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-moment"}},[s._v("#")]),s._v(" 1.moment")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("时间格式化\n")])])]),e("h5",{attrs:{id:"_2-i5ting-toc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-i5ting-toc"}},[s._v("#")]),s._v(" 2.i5ting_toc")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\ni5ting_toc是一个可以把md文档转为html页面的小工具\n\n使用\n//安装\nnpm install i5ting_toc -g\n//调用i5ting_toc将md转成html\ni5ting_toc -f 要转换的md文件路径 -o\n")])])]),e("h5",{attrs:{id:"_3-nodemon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-nodemon"}},[s._v("#")]),s._v(" 3.nodemon")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\nnodemon能够监听项目文件的变化，当代码修改后,nodemon会自动帮我们重启项目，极大方便了开发和调用\n\n安装\nnpm i nodemon -g\n\n使用\nnodemon 执行文件路径 \nnodemon 1.js\n")])])]),e("h3",{attrs:{id:"node-js内置模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js内置模块"}},[s._v("#")]),s._v(" Node.js内置模块")]),s._v(" "),e("h5",{attrs:{id:"_1-querystring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-querystring"}},[s._v("#")]),s._v(" 1.querystring")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("介绍\n\tquerystring模块是专门用来处理查询字符串，通过这个模块提供的parse()函数，可以把字符串解析成对象\n // 导入内置querystring模块\nconst qs = require('querystring')   \n//使用\nconst str = 'name=cc&id=123&age=%E7%94%B7'\nconst body = qs.parse(str)   \nconsole.log(body) //输出 { name: 'cc', id: '123', age: '男' }\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);